//---------------------------------------------------------------------------

#ifndef mainH
#define mainH

#include <Classes.hpp>
#include <Controls.hpp>
#include <StdCtrls.hpp>
#include <Forms.hpp>
//---------------------------------------------------------------------------
#include <dbt.h> //DBT_常數 註冊要取得的裝置消息
#include "HID.h"
#include "IO_Request.h"
#include "DeviceNotify.h"
#include <Buttons.hpp>
#include <Registry.hpp>
#include <ExtCtrls.hpp>
#include <Mask.hpp>
#include <Menus.hpp>
#include <Graphics.hpp>

#include "COM_control.h"
#include <queue>
#include <fstream.h>
#include <string>

const AnsiString APP_TITLE = "DLT Tool ver.1.00 (Dynamic load Test Tool, Action Star ,2018)";
//
const AnsiString SetVoltage[5] = //5V , 9V , 12V ,15V ,20V
{
 "03 14 04 70 33 01 01" ,
 "03 14 04 70 33 01 02" ,
 "03 14 04 70 33 01 03" ,
 "03 14 04 70 33 01 04" ,
 "03 14 04 70 33 01 05"
 };
const AnsiString ExecuteVoltageSetting = "03 14 07 70 08 04 41 4E 65 67";
const AnsiString ReadADValue = "03 13 E8 FF 90";
const AnsiString PASSWORD  = "SET";

const float UNIT = 0.0195; //單位元電壓值

//GUID
const char GUID_USB_HUB[] = "{F18A0E88-C30C-11D0-8815-00A0C906BED8}";
const char GUID_USB_DEVICE[] = "{A5DCBF10-6530-11D2-901F-00C04FB951ED}";
const char GUID_HID[] = "{4d1e55b2-f16f-11cf-88cb-001111000030}";

// HID PVID
const wchar_t PD_BOARD_PVID[] = L"hid#vid_0835&pid_fe00";
//
#define GET_VALUE_TIMEOUT_MS 500
#define TIME_INTERVAL 200
#define HARDWARE_VOLTAGE_COMPENSATION 13

#define HID_IS_ONLINE		0
#define HID_TURN_ON			1
#define SET_VOLTAGE			2
#define EXECUTE_SETTING 	3
#define TEST_VOLTAGE_END	6
#define HID_NOT_FIND		7
#define DL_NOT_FIND		    8
#define TEST_PASS		    9
#define TEST_FAIL		    10
#define READ_NO_LOAD_VOLTAGE_VALUE		4
#define READ_FULL_LOAD_VOLTAGE_VALUE	5
#define READ_OVER_LOAD_VOLTAGE_VALUE	11

#define DEBUG(String)    FrmMain->moDebug->Lines->Add(String)

//---------------------------------------------------------------------------

class TFrmMain : public TForm
{
__published:	// IDE-managed Components
	TPanel *pl_Set_Switch;
	TPanel *Panel1;
	TBitBtn *btnStart;
	TPanel *Panel7;
	TPanel *pl_Set;
	TPanel *Panel71;
	TEdit *edtPassWord;
	TBitBtn *btnSet;
	TPanel *pl_Debug;
	TMemo *moDebug;
	TPanel *plVoltageBox;
	TPanel *pl_FullloadTitle;
	TPanel *pl_NoloadTitle;
	TPanel *plIniName;
	TPanel *plResult;
	TTimer *Timer1;
	TPanel *Panel6;
	TPanel *Panel20;
	TPanel *Panel2;
	TEdit *edtLossVol;
	TPanel *Panel4;
	TPanel *plvotage;
	TPanel *pl_read_NoLoad_voltage;
	TPanel *pl_full_load_voltage;
	TPanel *pl_set_title;
	TPanel *plNoLoadTitle;
	TPanel *plFullLoadTitle;
	TPanel *Panel55;
	TPanel *pl_SetRange;
	TPanel *plNoLoad;
	TEdit *edt_max;
	TPanel *Panel48;
	TEdit *edt_min;
	TPanel *plFullLoad;
	TEdit *edt_load_min;
	TPanel *Panel50;
	TEdit *edt_load_max;
	TPanel *Panel52;
	TPanel *Panel59;
	TCheckBox *ckbAuto;
	TPanel *Panel10;
	TPanel *Panel11;
	TEdit *edtVID;
	TPanel *Panel9;
	TPanel *Panel12;
	TEdit *edtPID;
	TPanel *plSpace;
	TPanel *plOverLoadRangeTitle;
	TPanel *pl_OverloadTitle;
	TPanel *plOverLoadRange;
	TEdit *edt_overload_min;
	TPanel *Panel53;
	TEdit *edt_overload_max;
	TPanel *pl_over_load_voltage;
	TCheckBox *ckbOverLoad;
	TPanel *Panel70;
	TPanel *Panel72;
	TEdit *edtSetCurrent;
	TPanel *Panel73;
	TPanel *Panel74;
	TPanel *Panel75;
	TPanel *plOverLoad;
	TPanel *Panel8;
	TEdit *edtSetOverLoadCurrent;
	TPanel *Panel22;
	TPanel *Panel14;
	TPanel *Panel3;
	bool __fastcall HID_ReadReport(AnsiString Value);
	void __fastcall EnumHID();
	void __fastcall UI_DisplayCmd(unsigned char *pBuf, int size);
	void __fastcall btnStartClick(TObject *Sender);
	void __fastcall FormClose(TObject *Sender, TCloseAction &Action);
	void __fastcall ckbAutoClick(TObject *Sender);
	void __fastcall edtVIDChange(TObject *Sender);

	void __fastcall moDebugChange(TObject *Sender);
	void __fastcall edtPassWordEnter(TObject *Sender);
	void __fastcall btnSetClick(TObject *Sender);
	void __fastcall pl_ckb1_1Click(TObject *Sender);
	void __fastcall edt_minChange(TObject *Sender);
	void __fastcall edt_minExit(TObject *Sender);
	void __fastcall pl_Set_SwitchClick(TObject *Sender);
	void __fastcall plResultDblClick(TObject *Sender);
	void __fastcall edtPassWordKeyPress(TObject *Sender, wchar_t &Key);
	void __fastcall ckbOverLoadClick(TObject *Sender);
	void __fastcall FormResize(TObject *Sender);
	void __fastcall FormKeyPress(TObject *Sender, wchar_t &Key);
private:	// User declarations
	HID m_hid;
	IO_Request m_ir, m_or;
	AnsiString m_ADValue;

	void VoltageMainTest();
	void Tx(AnsiString Value);
	bool Rx(AnsiString Value);
	void Rx_ValueAnalyze(AnsiString Value);
	bool HID_TurnOn();
	void HID_TurnOff();
	void Voltage_Test();
	void SetValueEnabled(bool Enabled);

	int  DL_CMD(AnsiString CMD);

	int  HexToInt(AnsiString HexStr);
	void ReadRegSet();
	void SetRegVal(AnsiString numTestItem,bool AutoTest,AnsiString DutVPID);
	bool CheckVPIDSET(TEdit * edt);
	bool SaveVoltageRangeSetting();
	bool FindIniFile();
	bool ReadInISet();
	bool SetInIVal(bool AutoTest,AnsiString DutVPID);
	AnsiString Findfilemsg(AnsiString filename, AnsiString findmsg,
	int rownum);
	AnsiString FILE_DUT_SET_INI;
	//USB拔插消息
	DeviceNotification g_DeviceNogification;
	TWndMethod OldWindowProc;
	void __fastcall MyWindowProc(TMessage&);
public:		// User declarations

	bool g_bError;
	cCOM *CL_DEV_CONTROL;
	queue<AnsiString> que_cmd;
	void Delay(ULONG iMilliSeconds);
	bool bTEST_END_SWITCH_5V;
	bool bOverload;
	__fastcall TFrmMain(TComponent* Owner);
};
//---------------------------------------------------------------------------
extern PACKAGE TFrmMain *FrmMain;
//---------------------------------------------------------------------------
#endif
